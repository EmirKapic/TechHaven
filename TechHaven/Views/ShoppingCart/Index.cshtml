@model IList<CartItemViewModel>
@using TechHaven.Services;
@using Microsoft.AspNetCore.Identity;
@inject CartManager _cartManager;
@inject GuestRecommendation _guestRecommendation;
@inject CustomerRecommendation _customerRecommendation;
@inject ProductManager _productManager;
@inject SignInManager<Customer> _signInManager;
@inject GuestShoppingCart _guestShoppingCart;
@{
    var cart = await _cartManager.GetCurrentCart();
    var products = (IList<Product>)cart.Products;
    double shipmentFee = 8.00;
    double withShipment = cart.TotalPrice;
    if (cart.TotalPrice <= 200)
    {
        withShipment += shipmentFee;
    }
    var priceWithShipment = withShipment.ToString("F");
    if (cart.Products.Count() == 0) priceWithShipment = "0";
}


<form method="post" asp-action="StartOrder">
<div class="container my-4">
    <h2 class="text-center">Shopping cart</h2>
    <hr class="mb-4" />
    <div class="row">
        
        <div class="col-lg-8 table-responsive">
            <table class="table table-hover align-middle">
                <thead>
                    <tr>
                        <th scope="col">Proizvod</th>
                        <th scope="col">Cijena</th>
                        <th scope="col">Količina</th>
                        <th scope="col">Ukupno</th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody class="table-group-divider">
                    @for(int i = 0; i < Model.Count; ++i)
                    {
                        <tr>
                            <td scope="row">
                                <img src="https://placehold.co/70x70" class="img-fluid" alt="...">
                                <span class="ms-2"> @products[i].Manufacturer @products[i].Model</span>
                            </td>
                            <td>
                                <span id="price-per-product">
                                        @products[i].Price
                                    </span> KM
                            </td>
                            <td>
                                <input class="form-control quantity" style="min-width: 50px; width: 40%; max-width: 100px;" type="number" min="1" max = "100" value="1" asp-for="@Model[i].NumberOfRepetitions" />
                                <input type="hidden" asp-for="@Model[i].Product.Id">
                                <input type="hidden" asp-for="@Model[i].Product.Manufacturer"/>
                                <input type="hidden" asp-for="@Model[i].Product.Model"/>
                                <input type="hidden" asp-for="@Model[i].Product.Price"/>
                                <input type="hidden" asp-for="@Model[i].Product.Category"/>
                            </td>
                            <td>
                                <span id="total-product-price">
                                        @products[i].Price
                                </span> KM
                            </td>
                            <td>
                                <a onclick="RemoveFromCart()" class="btn-close"></a>
                                <input id="prod-id" type="hidden" value="@Model[i].Product.Id">
                            </td>
                        </tr>
                    } 
                        
                </tbody>
            </table>
        </div>

        <div class="col-lg">
            <div class="card bg-light">
                <div class="card-body">
                    <h5 class="card-title text-center">Ukupni iznos</h5>
                    <hr />
                    <div class="fs-5 d-flex justify-content-between mb-1">
                        <div>Ukupno:</div>
                        <div >
                               <span id ="total-without-shipment">
                               @cart.TotalPrice.ToString("F")
                            </span> KM
                            
                        </div>
                    </div>
                    <div class="fs-5 d-flex justify-content-between mb-1">
                        <div>Dostava:</div>
                        @if (cart.TotalPrice > 200)
                        {
                            <div class="text-decoration-line-through">@shipmentFee.ToString("F") KM</div>
                        }
                        else
                        {
                            <div>@shipmentFee.ToString("F") KM</div>
                        }
                    </div>
                    <p class="fs-6 fw-light">Dostava je <b>besplatna</b> za sve narudžbe preko 200KM.</p>

                    <hr />
                    <div class="d-flex justify-content-between mb-2">
                        <h5>Ukupna cijena: </h5>
                            <h5> <span id="total-with-shipment">@priceWithShipment</span> KM</h5>
                    </div>
                    
                        <button type="submit" class="btn btn-primary w-100" >Kupi sada</button>
                    
                </div>
            </div>
        </div>
    </div>      
</div>
</form>

<!-- Recommendations -->
<div class="container mt-4">
    <div class="border border-secondary-subtle rounded p-3">
        <h3 class="text-center mb-3">Recommended for you</h3>
        <div class="row row-cols-1 row-cols-sm-2 row-cols-lg-4 g-3">
            @{
                IEnumerable<Product> recommends;
                if (!_signInManager.IsSignedIn(User))
                {
                    var allProducts = (await _productManager.GetAllProducts()).ToList();
                    await _guestRecommendation.Setup(new HistoryAnalyzer(allProducts));
                    recommends = _guestRecommendation.RecommendProducts();
                }
                else
                {
                    var allProducts = (await _productManager.GetAllProducts()).ToList();
                    await _customerRecommendation.Setup(new HistoryAnalyzer(allProducts));
                    recommends = _customerRecommendation.RecommendProducts();
                }
                
                foreach (var prod in recommends.Take(4))
                {
                    <div class="col">
                        <div class="card h-100">
                            <img src="https://placehold.co/600x400" class="card-img-top" alt="...">
                            <div class="card-body">
                                <h5 class="card-title text-center">@prod.Manufacturer @prod.Model</h5>
                            </div>
                            <div class="card-footer d-flex justify-content-between align-items-center p-2">
                                <a class="btn btn-sm btn-primary" asp-controller="Products" asp-action="ProductDetails" asp-route-id="@prod.Id">Detalji</a>
                                <small class="text-body-secondary">@prod.Price KM</small>
                                <a onclick="AddToCart()" class="btn btn-sm btn-success">Dodaj</a>
                                <input id ="prod-id-add" type="hidden" value="@prod.Id">
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>
<script> 
    async function RemoveFromCart() {
        const tableRow = event.target.parentNode.parentNode;
        tableRow.parentNode.removeChild(tableRow);

        const td = event.target.parentNode;

        const prodId = td.querySelector('#prod-id').value;

        const parameters = new URLSearchParams();
        parameters.append("id", prodId.toString());

        const url = "/ShoppingCart/RemoveFromCart?" + parameters.toString();
        const result = await fetch(url)
            .then(response => response.json());

        console.log(result);
        window.location.reload();
    }

    async function AddToCart() {
        const container = event.target.parentNode;
        const prodId = container.querySelector('#prod-id-add').value;

        const parameters = new URLSearchParams();
        parameters.append("id", prodId.toString());
        const url = "/Products/AddToCart?" + parameters.toString();

        const result = await fetch(url)
            .then(response => response.json());
        console.log(result);
        window.location.reload();
    }

    function updateCosts(){
        if (event.target.value <= 0 || event.target.value > 100) {
            event.target.value = 1;
            console.log("Must be 1-100")
        }

        const inputParent = event.target.parentNode.parentNode;
        
        
        let totalPriceNode = inputParent.querySelector('#total-product-price');
        const pricePerProductNode = inputParent.querySelector('#price-per-product');
        const totalPriceInt = parseInt(pricePerProductNode.textContent)*event.target.value
        totalPriceNode.textContent = totalPriceInt;
        
        let cartPriceNode = document.querySelector('#total-without-shipment');

        const allTotalPriceNodes = document.querySelectorAll('#total-product-price');

        let totalPriceBeforeShipping = 0.0;
        allTotalPriceNodes.forEach((node) => {
            totalPriceBeforeShipping += parseInt(node.textContent);
        });
        cartPriceNode.textContent = totalPriceBeforeShipping.toFixed(2);

        let cartPriceWithShippmentNode = document.querySelector('#total-with-shipment');

        if (totalPriceBeforeShipping > 200){
            cartPriceWithShippmentNode.textContent = cartPriceNode.textContent;
        }
        else{
            cartPriceWithShippmentNode.textContent = (totalPriceBeforeShipping + 8.00).toFixed(2);
        }

        console.log("Example" + event.target.value);
    }

    document.querySelectorAll('.quantity').forEach( (btn) => {
        btn.addEventListener('change', updateCosts);
    });  
</script>


<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.3/jquery.validate.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.13/jquery.validate.unobtrusive.min.js"></script>

